<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN" "http://xml.resource.org/authoring/rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc2617 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
  <!ENTITY rfc3230 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3230.xml">
  <!ENTITY rfc3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml">
  <!ENTITY rfc4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
  <!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
  <!ENTITY rfc6376 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6376.xml">
  <!ENTITY rfc6749 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749.xml">
  <!ENTITY rfc7230 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml">
  <!ENTITY rfc7235 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7235.xml">
  <!ENTITY jwa SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-jose-json-web-algorithms-20.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<rfc category="std" ipr="trust200902" submissionType="independent" 
     docName="draft-sporny-http-proofs-00">
<front>
 <title>Cryptographic Proofs for HTTP Messages</title>

 <author initials="M.S." surname="Sporny" fullname="Manu Sporny">
  <organization>Digital Bazaar</organization>
  <address>
   <postal>
    <street>1700 Kraft Drive</street>
    <street>Suite 2408</street>
    <city>Blacksburg</city> <region>VA</region>
    <code>24060</code>
    <country>US</country>
   </postal>
   <phone>+1 540 961 4469</phone>
   <email>msporny@digitalbazaar.com</email>
   <uri>http://manu.sporny.org/</uri>
  </address>
 </author>

 <date month="August" year="2014" />
 <area>Security</area>
 <workgroup></workgroup>
 <keyword>HTTP</keyword>
 <keyword>mathematical proof</keyword>
 <keyword>proof of work</keyword>
 <keyword>authentication</keyword>
 <abstract>
  <t>
For a client to access a particular resource on the Web, a server must
expend a certain amount of computational effort to respond to the request. In
some cases this computational effort is sizeable and the server may want to
only respond to certain clients. For example, in a distributed 
denial-of-service attack, a server may require all clients to expend a
certain amount of resources via a client-run proof-of-work algorithm to 
throttle the number of incoming requests to a more manageable number. This
document details a few HTTP Headers that may be used to request and
transmit cryptographic mathematical proofs in HTTP headers.
  </t>
 </abstract>
 <note title="Feedback">
  <t>
This specification is a thought exercise that may be submitted on a 
standardization track in the future. Feedback related to this specification 
should be sent to
<eref target="mailto:msporny@digitalbazaar.com">msporny@digitalbazaar.com</eref>.
  </t>
 </note>
</front>

<middle>

 <section anchor="intro" title="Introduction">
  <t>
This protocol extension is intended to provide a simple and standard way for 
clients and servers to request and transmit mathematical proofs to one another.
  </t>
  
  <t>
For a client to access a particular resource on the Web, a server must
expend a certain amount of computational effort to respond to the request. In
some cases this computational effort is sizeable and the server may want to
only respond to certain clients. For example, in a distributed 
denial-of-service attack, a server may require all clients to expend a
certain amount of resources via a client-run proof-of-work algorithm to 
throttle the number of incoming requests to a more manageable number.
  </t>

  <t>
Editor's note: Explain why proofs of work are interesting for HTTP. 
Specifically, when you have a public resource where you don't want to 
authenticate users, but you do want to be able to throttle requests. 
For example, proxies, URL redirection services, and CDNs could benefit from
these sorts of services to mitigate distributed denial-of-service attacks.
Systems where all clients slam a particular endpoint, like high-frequency 
trading systems, could use such a mechanism to purposefully slow incoming 
requests. Block-chain-like systems could use this mechanism as a native
way to access shared databases (like a decentralized ledger). 
There may be more uses, but those are the ones that inspired this specification.
  </t> 
 
 </section>
 
 <section anchor="components" title="The Components of a Proof">
  <t>
There are a number of components in a proof that are common between the
'Proof' HTTP Authentication Scheme and the 'Proof' HTTP Header. This
section details the components of a HTTP Proof.
  </t>

   <section anchor="params" title="Proof Parameters">

    <t>
The following section details the proof parameters.
    </t>

    <section anchor="algorithm" title="algorithm">
     <t>
REQUIRED.  The `algorithm` field specifies the specific mathematical proof
algorithm that is employed by the rest of the parameters. The value of this
field SHOULD be a registered algorithm as defined in the Proof Algorithm
Registry.
     </t>
    </section>
    
    <section anchor="difficulty" title="difficulty">

     <t>
REQUIRED.  The `difficulty` field denotes the level of difficulty that is
associated with the `algorithm` field. The value of the field is highly
dependent on the algorithm listed in the Proof Algorithm Registry.
     </t>

    </section>
    
    <section anchor="problem" title="problem">
     <t>
OPTIONAL.  The `problem` value is used by the server to specify the
problem to solve. It is typically used to initialize the proof algorithm.
     </t>
    </section>

    <section anchor="solution" title="solution">
     <t>
OPTIONAL.  The `answer` value is used by the client to specify the answer
to the problem posed to it by the server. This field is typically used when
sending a calculated answer to the server.
     </t>
    </section>

   </section>

   <section anchor="ambiguity" title="Ambiguous Parameters">
    <t>
If any of the parameters listed above are erroneously duplicated in the 
associated header field, then the last parameter defined MUST be used. Any
parameter that is not recognized as a parameter, or is not well-formed, 
MUST be ignored.
    </t>
   </section>
   
 </section>
  
 <section anchor="auth-scheme" title="The 'Proof' HTTP Authentication Scheme">

  <t>
The "proof" authentication scheme is based on the model that the client must
authenticate itself with a mathematical proof that answers the question
posed by the server. The scheme is parameterized enough such that it is not 
bound to any particular proofing algorithm.
  </t>
  
  <section anchor="auth-header" title="Authorization Header">

   <t>
The client is expected to send an Authorization header 
(as defined in 
<xref target="RFC7235">RFC 7235</xref>, <eref 
target="http://tools.ietf.org/html/draft-ietf-rfc7235-auth-25#section-4.1">
Section 4.1</eref>) where the "auth-scheme" is "Proof" and the 
"auth-param" parameters meet the requirements listed in 
Section 2: The Components of a Proof.
   </t>

   <t>
The rest if this section uses the following HTTP request as an example.

    <figure>
     <artwork>
POST /foo HTTP/1.1
Host: example.org
Date: Tue, 07 Aug 2014 20:51:35 GMT
Content-Type: application/json
Content-Length: 18

{"hello": "world"}
     </artwork>
    </figure>
   </t>
   
   <section anchor="auth-ipa" title="Initiating Proof Authorization">

    <t>
A server may notify a client when a protected resource could be accessed by
authenticating itself to the server. To initiate this process, the server
will request that the client authenticate itself via a 401 response code. The
server may optionally specify which type of proof, difficulty, and problem
it would like to have solved in the WWW-Authenticate header.

For example:
    <figure>
     <artwork>
HTTP/1.1 401 Unauthorized
Date: Thu, 08 Jun 2014 18:32:30 GMT
Content-Length: 1234
Content-Type: text/html
WWW-Authenticate: Proof realm="Example",
  algorithm="scrypt",difficulty="1068",problem="0f43ba8b21"

...
</artwork>
    </figure>
    </t>
   </section>
   
   <section anchor="auth-proof-example" title="Proof Example">
   
   <t>
The authorization header and proof would be generated as:
    <figure>
     <artwork>
Authorization: Proof realm="Example",algorithm="scrypt",difficulty="1068",
  problem="0f43ba8b21",solution="00000000b28fcd2"</artwork>
    </figure>
   </t>

    </section>
   </section>
  </section>

 <section anchor="sig" title="The 'Proof' HTTP Header">

  <t>
The "proof" HTTP Header is based on the model that the client must
authenticate itself with a mathematical proof that answers a question
that is commonly known to the client and the server. The scheme is 
parameterized enough such that it is not bound to any particular 
proofing algorithm.
  </t>
  
  <section anchor="sig-header" title="Proof Header">

   <t>
The sender is expected to transmit a header 
(as defined in 
<xref target="RFC7230">RFC 7230</xref>, <eref 
target="http://tools.ietf.org/html/rfc7230#section-3.2">
Section 3.2</eref>) where the "field-name" is "Proof", and the "field-value"
contains one or more "auth-param"s (as defined in 
<xref target="RFC7235">RFC 7235</xref>, <eref 
target="http://tools.ietf.org/html/rfc7235#section-4.1">
Section 4.1</eref>) where the "auth-param" parameters meet the requirements 
listed in Section 2: The Components of a Proof.
   </t>

   <t>
The rest if this section uses the following HTTP request as an example.

    <figure>
     <artwork>
POST /foo HTTP/1.1
Host: example.org
Date: Tue, 07 Aug 2014 20:51:35 GMT
Content-Type: application/json
Content-Length: 18

{"hello": "world"}</artwork>
    </figure>
   </t>
      
   <section anchor="proof-header-example" title="Proof Header Example">
   
   <t>
The proof header would be generated as:
    <figure>
     <artwork>
Proof: algorithm="scrypt",difficulty="1068",
  problem="0f43ba8b21",solution="00000000b28fcd2"</artwork>
    </figure>
   </t>
   

    </section>
   </section>
  </section>

</middle>
<back>
 <references title="Normative References">
  &rfc2119;
  &rfc4648;
  &rfc6376;
  &rfc7230;
  &rfc7235;
  &jwa;
 </references>
 <references title="Informative References">
  &rfc2617;
  &rfc3230;
  &rfc3447;
  &rfc5246;
  &rfc6749;
 </references>

 <section anchor="appendix-a" title="Security Considerations">
  <t>
Editor's note: Clearly there are a number of concerning reverse denial
of service attacks that could be executed over non-HTTPS connections. A
simple header injection could keep a client spinning for a very long time.
Much more thinking needs to be put into this section.
  </t>
 </section>

 <section anchor="appendix-b" title="Extensions">
  <t>
This specification was designed to be simple, modular, and extensible.
Developers that desire more functionality than this specification provides 
are urged to ensure that an extension specification doesn't already exist 
before implementing a proprietary extension.
  </t>

  <t>
If extensions to this specification are made by adding new Proof
Parameters, those extension parameters MUST be registered in the
Proof Parameter Registry. The registry will be created and 
maintained at (the suggested URI) 
<eref target="http://www.iana.org/assignments/http-proof-parameters">
http://www.iana.org/assignments/http-proof-parameters</eref>. An 
example entry in this registry is included below:

   <figure>
    <artwork>
Proof Parameter: iterations
Reference to specification: [SOME_ALGORITHM], Section XYZ.
Notes (optional): The `iterations` parameter is used to specify the number
of iterations to run on the mathematical proof algorithm.
    </artwork>
   </figure>
  </t>
 </section>

 <section anchor="appendix-c" title="Test Values">
  <t>
Editor's note: This section should include some scrypt calculation stuff.

   <figure>
    <artwork>
Editor's note: Some scrypt parameters. 
    </artwork>
   </figure>

  </t>

  <t>
All examples use this request:
   <figure>
    <artwork>
POST /foo?param=value&amp;pet=dog HTTP/1.1
Host: example.com
Date: Thu, 05 Jan 2014 21:31:40 GMT
Content-Type: application/json
Content-Length: 18

{"hello": "world"}
    </artwork>
   </figure>
  </t>

  <section anchor="default-test" title="Default Test">
   <t>
Editor's Note: A simple scrypt-based proof of work.
    <figure>
     <artwork></artwork>
   </figure>
   </t>
   
 </section>
 </section>
 <section anchor="acknowledgements" title="Acknowledgements">
  <t>
The editor would like to thank the following individuals for feedback on and
implementations of the specification (in alphabetical order): None yet.
  </t>
 </section>
 <section anchor="appendix-d" title="IANA Considerations">
  <section anchor="iana-scheme" title="Signature Authentication Scheme">
   <t>
The following entry should be added to the Authentication Scheme Registry
located at <eref target="http://www.iana.org/assignments/http-authschemes">
http://www.iana.org/assignments/http-authschemes</eref>
   </t>
   <t>
Authentication Scheme Name: Proof<vspace/>
Reference: [RFC_THIS_DOCUMENT], Section 2.<vspace/>
Notes (optional): The Proof scheme is designed for clients to 
authenticate themselves with a server by performing a mathematical proof. 
   </t>
  </section>
  <section anchor="sa-registry" title="Proof Algorithm Registry">
   <t>
The following initial entries should be added to the Proof Algorithm 
Registry to be created and maintained at (the suggested URI) 
<eref target="http://www.iana.org/assignments/proof-algorithms">
http://www.iana.org/assignments/proof-algorithms</eref>:
   </t>
   <t>
Algorithm Name: scrypt<vspace/>
Reference: [SCRYPT_RFC_WHEN_IT_EXISTS]
Status: active
   </t>
  </section>

 </section>
</back>
</rfc>
